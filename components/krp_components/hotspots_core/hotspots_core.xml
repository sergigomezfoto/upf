<krpano>

 <style name="hspano"
	url="%FIRSTXML%/assets/img/panohs.png"
 />
 <style name="hsphoto"
	url="%FIRSTXML%/assets/img/photohs.png"
 />
 <style name="hsvideo"
	url="%FIRSTXML%/assets/img/videohs.png"
 />

 <style name="hs"
    onloaded="assignpreview();onloadedhs();" 
    s_localize_editmode="false" 
    s_localize_radius="20|60" 
    s_localize_interval="0.1"
    alpha="0.75"
    crop="0|0|74|74"
    onovercrop="74|0|74|74"
    distorted="true"
    scale="0.75"
    onhover="hsonhover()"
    onhover2="tween(hotspot[(caller.name + 'preview')].alpha|hotspot[(caller.name + 'title')].alpha,1,0.2,linear);"
    onout="hsonout()"
    capture="true"
    onclick="hsonclick"

 />
  <style name="hs_preview"
      onloaded="assigntitle(get(superparent));" 
      scale="0.5"
      ox="0"
      oy="80"
      distorted="true"
      blendmode="normal"
      alpha="0"
      autoalpha="true"
      capture="false"
    
  />
  <cssstyles>
    .hstext span{
       background-color: rgba(0, 0, 0, 0.5);
    line-height: 1.8em;
    padding: 0.2em;
    }
  </cssstyles>
  <hstitlecss val="font-family:'lota_regular';font-size:16px;color:#ffffff;text-align:left;transition:all 0.2s;text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);"/>
    <style name="hs_title"
        type="text"
        css="get:hstitlecss.val"
        cssclass="hstext"
        distorted="true"
        bg="false"
        bgcolor="0x000000"
        onloaded="positionatehstitle"
        edge="bottom"
        width="110"
        alpha="0"
        autoalpha="true"
        capture="false"
    />
    <action name="positionatehstitle" scope="local">
      caller.oy=(hotspot[(caller.parentt)].oy + (hotspot[(caller.parentt)].pixelheight / 4) ); 
      caller.ox=((hotspot[(caller.parentt)].pixelwidth / 4) + 20 );  
    </action>


<action name="onloadedhs">

  s_localize();
  calc(hotspot[get(name)].s_onlocalize,'general_localize(' + name + ');');
  calc(hotspot[get(name)].s_onunlocalize,'general_unlocalize(' + name + ');');

</action>


<action name="general_localize" scope="local" args="hsname">
  tween(hotspot[(hsname + 'preview')].alpha|hotspot[(hsname + 'title')].alpha,1,0.2,linear);
</action>

<action name="general_unlocalize" scope="local" args="hsname">
  tween(hotspot[(hsname + 'preview')].alpha|hotspot[(hsname + 'title')].alpha,0,0.2,linear);
</action>


<action name="assignpreview" scope="local">

  addhotspot((caller.name + 'preview'),hs);
  hs.loadstyle('hs_preview');
  hs.url=('%FIRSTXML%/assets/img/hs/' + caller.name + '.jpg');
  hs.ath=(hotspot[(caller.name)].ath);
  hs.atv=(hotspot[(caller.name)].atv);
  hs.superparent=(caller.name); 
  hs.onclick="callwith(hotspot[get(superparent)],'onclick')";

</action>

<action name="assigntitle" scope="local" args="superparent">

  addhotspot((superparent + 'title'),hs);
  hs.loadstyle('hs_title');
  hs.text=(data[(superparent)].content);
  hs.ath=(hotspot[(caller.name)].ath);
  hs.atv=(hotspot[(caller.name)].atv);
  hs.superparent=(superparent);
  hs.parentt=(caller.name);
  hs.onclick="callwith(hotspot[get(superparent)],'onclick')";


</action>

<action name="hsonhover" scope="local">
if (!caller.s_localized,
   tween(hotspot[(caller.name + 'preview')].alpha|hotspot[(caller.name + 'title')].alpha,1,0.2,linear);
);
</action>
<action name="hsonout" scope="local">
if (!caller.s_localized,
   tween(hotspot[(caller.name + 'preview')].alpha|hotspot[(caller.name + 'title')].alpha,0,0.2,linear);
);
</action>

<action name="hsonclick" scope="local">

  popup(calc('externals/panosandimages/' + caller.name + '/index.html?ln=' + language),'95%|95%','hs');  

</action>
<!-- 
LAUNCH:
 
element static:
onload="s_localize()"
element movment:
onload="s_localize(true)"

IN ELEMENT (HS, OR PLUGIN):

s_localize_editmode="true" / false: nothing , true: it apears a ghost canvas to localize , def: false
s_localize_radius="30|5" / 30 on element : +30ath-30  +30atv-30 , 30|5 / +30ath-30 +5atv-5 ,  def: 10 
s_localize_interval="0.1" /  interval refreshing time , def: 0.01
s_onlocalize="general_localize();" / actions to throw when element localized
s_onunlocalize="general_unlocalize();" / actions to throw when element unlocalized.
s_localize_group="GROUPNAME" /define the pertinece to a group to be able to pause or clear all in one
s_localize_fov_range="maxzoomOUT|maxzoomIN" /define the range where this hotspot have to react to s_localize or s_unlocalize
GLOBAL VAIABLES THROWN:

lecture:
	s_loaclaizable /setted to true at the begining to be able to clear all and after restart localization filtering hs via for bucle.
	s_localize_TARGETNAME_l / left point of localization area.  
	s_localize_TARGETNAME_r / right point of localization area.
	s_localize_TARGETNAME_u / upper point of localization area.
	s_localize_TARGETNAME_d / lower point of localization area.
	s_localized_any / when any element is localized i set to true, on unlocalize set to false. before any localization unset.
    s_localized_TARGETNAME / true element localized, false element unlocalized, at the begining unset. 
	hotspot[NAME].s_localized / true is localized, false is unlocalized.
    s_localized_last / name of the last localized don't work well in bunch solapated.
    s_localized_now / the current element localized. 'none' when nothing localized and unset at the beginnig .don't work well in bunch solapated.
write:
	s_localize_TARGETNAME_clear / when set to true clear interval ans sotop the acion.
	s_localize_clear_all / when set to true clear interval ans sotop the acion of all hs.
	s_localize_GROUPNAME_clear / when true clear all intervals for thos hs with this group name.
    s_localize_pause / if true pause all localization actions (not vars) if false restart all localizations
	s_localize_GROUPNAME_pause /s_localize_group="GROUPNAME" if true all of the group will be paused
    s_localize_TARGETNAME_pause / if true pause target localization actions (not vars) if false restart target localization
	
				
-->
// per distingir els phantoms dels hs

<action name="s_set_bg_random_color" scope="local" args="tone" >

  calc(calc(caller.name + 'rc'), random * 0xFFFFFF);
  tohex(calc(caller.name + 'rc'), 0x, 6);
  copy(rc,calc(caller.name + 'rc'));

  if (layer[get(caller.name)].name,
    calc(layer[get(caller.name)].bgcolor,rc);
  ,
    if (caller.fillcolor,
      calc(hotspot[get(caller.name)].fillcolor,rc);
    ,
      calc(hotspot[get(caller.name)].bgcolor,rc);
    );
  ); 

</action>

</krpano>
